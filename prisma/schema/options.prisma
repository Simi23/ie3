model Option {
    name  String @id
    value Json
}

model Seat {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    public Boolean @default(true)

    name  String @unique
    owner User?
}

model ClassGroup {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    name String
    year Int

    hidden Boolean

    classes Class[]
}

model Class {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    name String

    group   ClassGroup @relation(fields: [groupId], references: [id])
    groupId String

    hidden Boolean

    users User[]
}

model Media {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    name String
    path String    @default("")
    url  String    @default("")
    type MediaType

    // References
    competitions Competition[]
    displays     DisplayContent[]
}

enum MediaType {
    Image
}

model MdContent {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    name    String
    content String

    displays DisplayContent[]
}

enum DisplayContentType {
    ShortText
    FormattedText
    Bracket
    Media
    TopList
}

model DisplayContent {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    // Descriptor block
    order Int
    type  DisplayContentType
    name  String

    // Possible contents
    shortText       String?
    formattedText   MdContent? @relation(fields: [formattedTextId], references: [id], onDelete: Cascade)
    formattedTextId String?
    bracket         Bracket?   @relation(fields: [bracketId], references: [id], onDelete: Cascade)
    bracketId       String?
    media           Media?     @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId         String?
    topList         TopList?   @relation(fields: [topListId], references: [id], onDelete: Cascade)
    topListId       String?
}
