model User {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    email         String  @unique
    emailToken    String
    emailVerified Boolean @default(false)

    username   String @unique
    fullname   String
    class      Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId    String
    adminClass Int    @default(0)

    passwordHash          String
    passwordResetRequests PasswordResetRequest[]
    sessions              Session[]

    ownPc        Boolean
    ethernetPort Boolean
    ownChair     Boolean

    teams        UserInTeam[]
    competitions Competition[]
    seat         Seat              @relation(fields: [seatId], references: [id])
    seatId       String            @unique
    brackets     BracketPartUser[]

    paid Boolean @default(false)
}

model Session {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    expiresAt DateTime  @default(dbgenerated("(now() + '1 day'::interval)"))

    valid     Boolean @default(true)
    address   String
    userAgent String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model PasswordResetRequest {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    token String  @unique
    valid Boolean @default(true)
}
