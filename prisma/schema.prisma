// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String  @unique
  emailToken    String
  emailVerified Boolean @default(false)

  username   String @unique
  fullname   String
  class      String
  adminClass Int    @default(0)

  passwordHash          String
  passwordResetRequests PasswordResetRequest[]
  sessions              Session[]

  ownPc        Boolean
  ethernetPort Boolean
  ownChair     Boolean

  teams        UserInTeam[]
  competitions Competition[]
  seat         Seat              @relation(fields: [seatId], references: [id])
  seatId       String            @unique
  brackets     BracketPartUser[]

  paid Boolean @default(false)
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(dbgenerated("now() + '1 day'::interval"))

  valid     Boolean @default(true)
  address   String
  userAgent String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model PasswordResetRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  token String  @unique
  valid Boolean @default(true)
}

model Seat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  owner User?
}

model Competition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  imageName   String

  teamCompetition Boolean
  teamLimit       Int     @default(1)

  users    User[]
  teams    Team[]
  brackets Bracket[]
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  users         UserInTeam[]
  competition   Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId String

  brackets BracketPartTeam[]
}

model UserInTeam {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  isLeader  Boolean @default(false)
  isPending Boolean @default(true)

  @@id(fields: [userId, teamId])
}

model Option {
  name  String @id
  value Json
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  message   String
}

model Bracket {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title               String
  administrativeTitle String
  numberOfCompetitors Int

  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId String

  teamParts BracketPartTeam[]
  userParts BracketPartUser[]
}

model BracketPartUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  round         Int
  roundLocation Int
  upper         Boolean
  startLocation Boolean

  points  Int[]
  won     Boolean
  started Boolean
  ended   Boolean

  bracket   Bracket @relation(fields: [bracketId], references: [id], onDelete: Cascade)
  bracketId String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model BracketPartTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  round         Int
  roundLocation Int
  upper         Boolean
  startLocation Boolean

  points  Int[]
  won     Boolean
  started Boolean
  ended   Boolean

  bracket   Bracket @relation(fields: [bracketId], references: [id], onDelete: Cascade)
  bracketId String

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?
}
